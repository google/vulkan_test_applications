/* Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 430
#include "inputs.h"

// We have to use LOCAL_X_SIZE instead of the kLocalXSize because
// it must be a literal.
layout (local_size_x = LOCAL_X_SIZE, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) buffer dat {
  uint data[];
} ssboData[kNumStorageBuffers];

#define ADD_OUTPUT(n) \
  output_value += ssboData[n].data[index];

void main() {
  uint index = gl_GlobalInvocationID.x;
  uint output_value = 0;
  // Unfortunately the glslang preprocessor isn't quite
  // complete enough to allow us to write a loop-unrolling macro.
  // So we have to match this with kNumStorageBuffers
  // Also can't add a simple loop, because that would require
  // the shaderStorageImageArrayDynamicIndexing feature
  ADD_OUTPUT(0)
  ADD_OUTPUT(1)
  ADD_OUTPUT(2)
  ADD_OUTPUT(3)
  ADD_OUTPUT(4)
  ADD_OUTPUT(5)
  ADD_OUTPUT(6)
  ADD_OUTPUT(7)
  ADD_OUTPUT(8)
  ADD_OUTPUT(9)
  ADD_OUTPUT(10)
  ssboData[kNumStorageBuffers-1].data[index] = output_value;
}
